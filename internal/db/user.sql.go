// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    id, email, username
) VALUES ($1, $2, $3) RETURNING created_at
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Email, arg.Username)
	var created_at time.Time
	err := row.Scan(&created_at)
	return created_at, err
}

const userByEmail = `-- name: UserByEmail :one
SELECT 
    id, email, username, created_at, updated_at
FROM users WHERE email = LOWER($1)
`

func (q *Queries) UserByEmail(ctx context.Context, email string) (Users, error) {
	row := q.db.QueryRowContext(ctx, userByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userByUsername = `-- name: UserByUsername :one
SELECT 
    id, email, username, created_at, updated_at
FROM users WHERE username = LOWER($1)
`

func (q *Queries) UserByUsername(ctx context.Context, username string) (Users, error) {
	row := q.db.QueryRowContext(ctx, userByUsername, username)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userExistsByEmail = `-- name: UserExistsByEmail :one
SELECT EXISTS (SELECT 1 FROM users WHERE email = $1)
`

func (q *Queries) UserExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, userExistsByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const userExistsByUsername = `-- name: UserExistsByUsername :one
SELECT EXISTS (SELECT 1 FROM users WHERE username LIKE $1)
`

func (q *Queries) UserExistsByUsername(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, userExistsByUsername, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
